Q()
q()
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("Biostrings", "GenomicRanges"))
library(GenoMagic)
library(Biostrings)  # Required for DNAStringSet
# Example DNA sequences
dna_examples = DNAStringSet(c("ATGCGTA", "TGCATGC", "CGTATCGTA", "ATATATC"))
# Analyzing the DNA sequences using your package's function
results = analyze_sequences(dna_examples)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("Biostrings", "GenomicRanges"))
library(GenoMagic)
library(analyze_sequence)
devtools::document()
devtools::install()
library(GenoMagic)
library(Biostrings)  # Required for DNAStringSet
# Example DNA sequences
dna_examples = DNAStringSet(c("ATGCGTA", "TGCATGC", "CGTATCGTA", "ATATATC"))
# Analyzing the DNA sequences using your package's function
results = analyze_sequences(dna_examples)
print(results
library(Biostrings)  # Required for DNAStringSet
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("Biostrings", "GenomicRanges"))
library(GenoMagic)
library(Biostrings)  # Required for DNAStringSet
# Example DNA sequences
dna_examples = DNAStringSet(c("ATGCGTA", "TGCATGC", "CGTATCGTA", "ATATATC"))
# Analyzing the DNA sequences using your package's function
results = analyze_sequences(dna_examples)
print(results)
View(results)
View(dna_examples)
View(dna_examples)
View(results)
View(dna_examples)
View(dna_examples)
View(dna_examples)
View(results)
View(results)
#' Analyze DNA Sequences
#'
#' This function performs a basic analysis of DNA sequences.
#' @param dna A DNAStringSet object containing DNA sequences.
#' @return A data frame with DNA sequence statistics.
#' @export
#' @examples
#' dna <- DNAStringSet(c("ACTG", "CAGT"))
#' analyze_sequences(dna)
analyze_sequences <- function(dna) {
require(Biostrings)
result <- data.frame(
length = width(dna),
gc_content = letterFrequency(dna, "GC", as.prob = TRUE)
)
return(result)
}
View(analyze_sequences)
source("C:/Users/renuk/Downloads/GenoMagic/R/function dna.R")
View(analyze_sequences)
View(analyze_sequences)
View(dna_examples)
#' Find Overlaps in Genomic Ranges
#'
#' This function identifies overlaps between two sets of genomic intervals.
#' @param gr1 GenomicRanges object representing the first set of intervals.
#' @param gr2 GenomicRanges object representing the second set of intervals.
#' @return A GenomicRanges object with the overlaps.
#' @export
#' @examples
#' gr1 <- GRanges(seqnames = c("chr1", "chr1"), ranges = IRanges(start = c(100, 200), end = c(150, 250)))
#' gr2 <- GRanges(seqnames = c("chr1"), ranges = IRanges(start = 130, end = 300))
#' find_overlaps(gr1, gr2)
find_overlaps <- function(gr1, gr2) {
require(GenomicRanges)
overlaps <- findOverlaps(gr1, gr2)
return(intersect(gr1[queryHits(overlaps)], gr2[subjectHits(overlaps)]))
}
View(find_overlaps)
#' Plot Genome Coverage
#'
#' This function visualizes the coverage across a genomic region.
#' @param coverage A numeric vector or Rle (Run-length encoding) representing coverage data.
#' @param region A character string specifying the genomic region to be plotted.
#' @return A plot showing genomic coverage.
#' @export
#' @examples
#' coverage <- Rle(c(rep(20, 100), rep(10, 100), rep(5, 100)))
#' plot_genome_coverage(coverage, "chr1:1-300")
plot_genome_coverage <- function(coverage, region) {
require(ggplot2)
df <- data.frame(position = seq_along(coverage), coverage = as.integer(coverage))
ggplot(df, aes(x = position, y = coverage)) +
geom_line() +
ggtitle(paste("Coverage Plot for", region)) +
xlab("Position") +
ylab("Coverage")
}
View(plot_genome_coverage)
View(plot_genome_coverage)
View(dna_examples)
#' Analyze DNA Sequences
#'
#' This function performs a basic analysis of DNA sequences.
#' @param dna A DNAStringSet object containing DNA sequences.
#' @return A data frame with DNA sequence statistics.
#' @export
#' @examples
#' dna <- DNAStringSet(c("ACTG", "CAGT"))
#' analyze_sequences(dna)
analyze_sequences <- function(dna) {
require(Biostrings)
result <- data.frame(
length = width(dna),
gc_content = letterFrequency(dna, "GC", as.prob = TRUE)
)
return(result)
}
View(analyze_sequences)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("Biostrings", "GenomicRanges"))
library(GenoMagic)
library(Biostrings)  # Required for DNAStringSet
# Example DNA sequences
dna_examples = DNAStringSet(c("ATGCGTA", "TGCATGC", "CGTATCGTA", "ATATATC"))
# Analyzing the DNA sequences using your package's function
results = analyze_sequences(dna_examples)
print(results)
devtools::document()
devtools::install()
library(GenoMagic)
View(dna_examples)
View(dna_examples)
View(dna_examples)
View(results)
View(results)
View(dna_examples)
